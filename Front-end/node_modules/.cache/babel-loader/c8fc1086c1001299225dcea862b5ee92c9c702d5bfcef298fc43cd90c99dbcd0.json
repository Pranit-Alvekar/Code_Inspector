{"ast":null,"code":"var _jsxFileName = \"C:\\\\CodeInspector\\\\Git\\\\AssignmentSubmissionApp\\\\front-end\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport \"./App.css\";\nimport { useLocalState } from \"./util/useLocalStorage\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport Homepage from \"./Homepage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // This will log \"Hello\" to the console when the component renders\n  const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\n  useEffect(() => {\n    if (!jwt) {\n      const reqBody = {\n        username: \"vivek\",\n        password: \"asdfasdf\"\n      };\n      fetch(\"api/auth/login\", {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"post\",\n        body: JSON.stringify(reqBody) // Sending the request body as JSON\n      }).then(response => Promise.all([response.json(), response.headers])).then(([body, headers]) => {\n        setJwt(headers.get(\"authorization\")); // Getting the \"authorization\" header value\n      });\n    }\n  }, []); // The empty array means this effect runs only once when the component mounts\n\n  useEffect(() => {\n    console.log(`JWT:${jwt}`);\n  }, [jwt]);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"dashboard\",\n      element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z94CGe+5YtbesdSOutCLtKKbGTw=\", false, function () {\n  return [useLocalState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useLocalState","Routes","Route","Dashboard","Homepage","jsxDEV","_jsxDEV","App","_s","jwt","setJwt","reqBody","username","password","fetch","headers","method","body","JSON","stringify","then","response","Promise","all","json","get","console","log","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/CodeInspector/Git/AssignmentSubmissionApp/front-end/src/App.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport \"./App.css\";\nimport { useLocalState } from \"./util/useLocalStorage\";\nimport { Routes, Route } from \"react-router-dom\";\n\nimport Dashboard from \"./Dashboard\";\nimport Homepage from \"./Homepage\";\n\nfunction App() {\n  // This will log \"Hello\" to the console when the component renders\n  const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\n\n  useEffect(() => {\n    if (!jwt) {\n      const reqBody = {\n        username: \"vivek\",\n        password: \"asdfasdf\",\n      };\n\n      fetch(\"api/auth/login\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"post\",\n        body: JSON.stringify(reqBody), // Sending the request body as JSON\n      })\n        .then((response) => Promise.all([response.json(), response.headers]))\n        .then(([body, headers]) => {\n          setJwt(headers.get(\"authorization\")); // Getting the \"authorization\" header value\n        });\n    }\n  }, []); // The empty array means this effect runs only once when the component mounts\n\n  useEffect(() => {\n    console.log(`JWT:${jwt}`);\n  }, [jwt]);\n\n  return (\n    <Routes>\n      <Route path=\"dashboard\" element={<Dashboard />} />\n      <Route path=\"/\" element={<Homepage />} />\n    </Routes>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAO,WAAW;AAClB,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAEhD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGV,aAAa,CAAC,EAAE,EAAE,KAAK,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,GAAG,EAAE;MACR,MAAME,OAAO,GAAG;QACdC,QAAQ,EAAE,OAAO;QACjBC,QAAQ,EAAE;MACZ,CAAC;MAEDC,KAAK,CAAC,gBAAgB,EAAE;QACtBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,CAAE;MACjC,CAAC,CAAC,CACCS,IAAI,CAAEC,QAAQ,IAAKC,OAAO,CAACC,GAAG,CAAC,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC,EAAEH,QAAQ,CAACN,OAAO,CAAC,CAAC,CAAC,CACpEK,IAAI,CAAC,CAAC,CAACH,IAAI,EAAEF,OAAO,CAAC,KAAK;QACzBL,MAAM,CAACK,OAAO,CAACU,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC;IACN;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER1B,SAAS,CAAC,MAAM;IACd2B,OAAO,CAACC,GAAG,CAAE,OAAMlB,GAAI,EAAC,CAAC;EAC3B,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;EAET,oBACEH,OAAA,CAACL,MAAM;IAAA2B,QAAA,gBACLtB,OAAA,CAACJ,KAAK;MAAC2B,IAAI,EAAC,WAAW;MAACC,OAAO,eAAExB,OAAA,CAACH,SAAS;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClD5B,OAAA,CAACJ,KAAK;MAAC2B,IAAI,EAAC,GAAG;MAACC,OAAO,eAAExB,OAAA,CAACF,QAAQ;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEb;AAAC1B,EAAA,CAnCQD,GAAG;EAAA,QAEYP,aAAa;AAAA;AAAAmC,EAAA,GAF5B5B,GAAG;AAqCZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}