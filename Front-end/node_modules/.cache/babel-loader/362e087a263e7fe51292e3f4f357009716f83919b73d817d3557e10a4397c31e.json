{"ast":null,"code":"var _jsxFileName = \"C:\\\\CodeInspector\\\\Git\\\\front-end\\\\src\\\\CommentContainer\\\\index.js\",\n  _s = $RefreshSig$();\nimport dayjs from \"dayjs\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Col, Row } from \"react-bootstrap\";\nimport Comment from \"../Comment\";\nimport ajax from \"../Services/fetchService\";\nimport { useUser } from \"../UserProvider\";\nimport { useInterval } from \"../util/useInterval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CommentContainer = props => {\n  _s();\n  const {\n    assignmentId\n  } = props;\n  const user = useUser();\n  const emptyComment = {\n    id: null,\n    text: \"\",\n    assignmentId: assignmentId != null ? parseInt(assignmentId) : null,\n    user: user.jwt,\n    createdDate: null\n  };\n  const [comment, setComment] = useState(emptyComment);\n  const [comments, setComments] = useState([]);\n  useInterval(() => {\n    updateCommentTimeDisplay();\n  }, 1000 * 5);\n  function updateCommentTimeDisplay() {\n    const commentsCopy = [...comments];\n    commentsCopy.forEach(comment => comment.createdDate = dayjs(comment.createdDate));\n    formatComments(commentsCopy);\n  }\n  function handleEditComment(commentId) {\n    const i = comments.findIndex(comment => comment.id === commentId);\n    const commentCopy = {\n      id: comments[i].id,\n      text: comments[i].text,\n      assignmentId: assignmentId != null ? parseInt(assignmentId) : null,\n      user: user.jwt,\n      createdDate: comments[i].createdDate\n    };\n    setComment(commentCopy);\n  }\n  function handleDeleteComment(commentId) {\n    // TODO: send DELETE request to server\n    ajax(`/api/comments/${commentId}`, \"delete\", user.jwt).then(msg => {\n      const commentsCopy = [...comments];\n      const i = commentsCopy.findIndex(comment => comment.id === commentId);\n      commentsCopy.splice(i, 1);\n      formatComments(commentsCopy);\n    });\n  }\n  function formatComments(commentsCopy) {\n    commentsCopy.forEach(comment => {\n      if (typeof comment.createDate === \"string\") {\n        comment.createDate = dayjs(comment.createDate);\n      }\n    });\n    setComments(commentsCopy);\n  }\n  useEffect(() => {\n    ajax(`/api/comments?assignmentId=${assignmentId}`, \"get\", user.jwt, null).then(commentsData => {\n      formatComments(commentsData);\n    });\n  }, []);\n  function updateComment(value) {\n    const commentCopy = {\n      ...comment\n    };\n    commentCopy.text = value;\n    setComment(commentCopy);\n  }\n  function submitComment() {\n    // if (\n    //   typeof comment.createdDate === \"object\" &&\n    //   comment.createdDate != null\n    // ) {\n    //   comment.createdDate = comment.createdDate.toDate();\n    // }\n    if (comment.id) {\n      ajax(`/api/comments/${comment.id}`, \"put\", user.jwt, comment).then(d => {\n        const commentsCopy = [...comments];\n        const i = commentsCopy.findIndex(comment => comment.id === d.id);\n        commentsCopy[i] = d;\n        formatComments(commentsCopy);\n        setComment(emptyComment);\n      });\n    } else {\n      ajax(\"/api/comments\", \"post\", user.jwt, comment).then(d => {\n        const commentsCopy = [...comments];\n        commentsCopy.push(d);\n        formatComments(commentsCopy);\n        setComment(emptyComment);\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        lg: \"8\",\n        md: \"10\",\n        sm: \"12\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: {\n            width: \"100%\",\n            borderRadius: \"0.25em\"\n          },\n          onChange: e => updateComment(e.target.value),\n          value: comment.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => submitComment(),\n      children: \"Post Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n        commentData: comment,\n        emitDeleteComment: handleDeleteComment,\n        emitEditComment: handleEditComment\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CommentContainer, \"i9IjfecOcFZSXF6EaVLGoQeWhtI=\", false, function () {\n  return [useUser, useInterval];\n});\n_c = CommentContainer;\nexport default CommentContainer;\nvar _c;\n$RefreshReg$(_c, \"CommentContainer\");","map":{"version":3,"names":["dayjs","React","useEffect","useState","Button","Col","Row","Comment","ajax","useUser","useInterval","jsxDEV","_jsxDEV","Fragment","_Fragment","CommentContainer","props","_s","assignmentId","user","emptyComment","id","text","parseInt","jwt","createdDate","comment","setComment","comments","setComments","updateCommentTimeDisplay","commentsCopy","forEach","formatComments","handleEditComment","commentId","i","findIndex","commentCopy","handleDeleteComment","then","msg","splice","createDate","commentsData","updateComment","value","submitComment","d","push","children","className","fileName","_jsxFileName","lineNumber","columnNumber","lg","md","sm","style","width","borderRadius","onChange","e","target","onClick","map","commentData","emitDeleteComment","emitEditComment","_c","$RefreshReg$"],"sources":["C:/CodeInspector/Git/front-end/src/CommentContainer/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport Comment from \"../Comment\";\r\nimport ajax from \"../Services/fetchService\";\r\nimport { useUser } from \"../UserProvider\";\r\nimport { useInterval } from \"../util/useInterval\";\r\n\r\nconst CommentContainer = (props) => {\r\n  const { assignmentId } = props;\r\n  const user = useUser();\r\n\r\n  const emptyComment = {\r\n    id: null,\r\n    text: \"\",\r\n    assignmentId: assignmentId != null ? parseInt(assignmentId) : null,\r\n    user: user.jwt,\r\n    createdDate: null,\r\n  };\r\n\r\n  const [comment, setComment] = useState(emptyComment);\r\n  const [comments, setComments] = useState([]);\r\n\r\n  useInterval(() => {\r\n    updateCommentTimeDisplay();\r\n  }, 1000 * 5);\r\n  function updateCommentTimeDisplay() {\r\n    const commentsCopy = [...comments];\r\n    commentsCopy.forEach(\r\n      (comment) => (comment.createdDate = dayjs(comment.createdDate))\r\n    );\r\n    formatComments(commentsCopy);\r\n  }\r\n\r\n  function handleEditComment(commentId) {\r\n    const i = comments.findIndex((comment) => comment.id === commentId);\r\n    const commentCopy = {\r\n      id: comments[i].id,\r\n      text: comments[i].text,\r\n      assignmentId: assignmentId != null ? parseInt(assignmentId) : null,\r\n      user: user.jwt,\r\n      createdDate: comments[i].createdDate,\r\n    };\r\n    setComment(commentCopy);\r\n  }\r\n\r\n  function handleDeleteComment(commentId) {\r\n    // TODO: send DELETE request to server\r\n    ajax(`/api/comments/${commentId}`, \"delete\", user.jwt).then((msg) => {\r\n      const commentsCopy = [...comments];\r\n      const i = commentsCopy.findIndex((comment) => comment.id === commentId);\r\n      commentsCopy.splice(i, 1);\r\n      formatComments(commentsCopy);\r\n    });\r\n  }\r\n  function formatComments(commentsCopy) {\r\n    commentsCopy.forEach((comment) => {\r\n      if (typeof comment.createDate === \"string\") {\r\n        comment.createDate = dayjs(comment.createDate);\r\n      }\r\n    });\r\n    setComments(commentsCopy);\r\n  }\r\n\r\n  useEffect(() => {\r\n    ajax(\r\n      `/api/comments?assignmentId=${assignmentId}`,\r\n      \"get\",\r\n      user.jwt,\r\n      null\r\n    ).then((commentsData) => {\r\n      formatComments(commentsData);\r\n    });\r\n  }, []);\r\n\r\n  function updateComment(value) {\r\n    const commentCopy = { ...comment };\r\n    commentCopy.text = value;\r\n    setComment(commentCopy);\r\n  }\r\n  function submitComment() {\r\n    // if (\r\n    //   typeof comment.createdDate === \"object\" &&\r\n    //   comment.createdDate != null\r\n    // ) {\r\n    //   comment.createdDate = comment.createdDate.toDate();\r\n    // }\r\n    if (comment.id) {\r\n      ajax(`/api/comments/${comment.id}`, \"put\", user.jwt, comment).then(\r\n        (d) => {\r\n          const commentsCopy = [...comments];\r\n          const i = commentsCopy.findIndex((comment) => comment.id === d.id);\r\n          commentsCopy[i] = d;\r\n          formatComments(commentsCopy);\r\n\r\n          setComment(emptyComment);\r\n        }\r\n      );\r\n    } else {\r\n      ajax(\"/api/comments\", \"post\", user.jwt, comment).then((d) => {\r\n        const commentsCopy = [...comments];\r\n        commentsCopy.push(d);\r\n        formatComments(commentsCopy);\r\n        setComment(emptyComment);\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"mt-5\">\r\n        <h4>Comments</h4>\r\n      </div>\r\n      <Row>\r\n        <Col lg=\"8\" md=\"10\" sm=\"12\">\r\n          <textarea\r\n            style={{ width: \"100%\", borderRadius: \"0.25em\" }}\r\n            onChange={(e) => updateComment(e.target.value)}\r\n            value={comment.text}\r\n          ></textarea>\r\n        </Col>\r\n      </Row>\r\n      <Button onClick={() => submitComment()}>Post Comment</Button>\r\n      <div className=\"mt-5\">\r\n        {comments.map((comment) => (\r\n          <Comment\r\n            key={comment.id}\r\n            commentData={comment}\r\n            emitDeleteComment={handleDeleteComment}\r\n            emitEditComment={handleEditComment}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}