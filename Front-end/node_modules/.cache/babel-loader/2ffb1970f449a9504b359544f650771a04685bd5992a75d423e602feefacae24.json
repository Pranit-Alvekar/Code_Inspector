{"ast":null,"code":"var _jsxFileName = \"C:\\\\CodeInspector\\\\Git\\\\AssignmentSubmissionApp\\\\front-end\\\\src\\\\Login\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocalState } from \"../util/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\n  function sendLoginRequest() {\n    const reqBody = {\n      username: \"vivek\",\n      password: \"asdfasdf\"\n    };\n    fetch(\"api/auth/login\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"post\",\n      body: JSON.stringify(reqBody) // Sending the request body as JSON\n    }).then(response => Promise.all([response.json(), response.headers])).then(([body, headers]) => {\n      setJwt(headers.get(\"authorization\")); // Getting the \"authorization\" header value\n    });\n  }\n  // The empty array means this effect runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit\",\n        type: \"button\",\n        onClick: () => sendLoginRequest(),\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Login, \"lCqwhzS5R1/jeWHrSia2nuEMkOc=\", false, function () {\n  return [useLocalState];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useLocalState","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","_s","username","setUsername","password","setPassword","jwt","setJwt","sendLoginRequest","reqBody","fetch","headers","method","body","JSON","stringify","then","response","Promise","all","json","get","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/CodeInspector/Git/AssignmentSubmissionApp/front-end/src/Login/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useLocalState } from \"../util/useLocalStorage\";\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\r\n\r\n  function sendLoginRequest() {\r\n    const reqBody = {\r\n      username: \"vivek\",\r\n      password: \"asdfasdf\",\r\n    };\r\n\r\n    fetch(\"api/auth/login\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"post\",\r\n      body: JSON.stringify(reqBody), // Sending the request body as JSON\r\n    })\r\n      .then((response) => Promise.all([response.json(), response.headers]))\r\n      .then(([body, headers]) => {\r\n        setJwt(headers.get(\"authorization\")); // Getting the \"authorization\" header value\r\n      });\r\n  }\r\n  // The empty array means this effect runs only once when the component mounts\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input type=\"email\" id=\"username\" value={username} onChange={(e)=>setUsername(e.target.value)}/>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input type=\"password\" id=\"password\" value={password} onChange={(e)=>setPassword(e.target.value)}/>\r\n      </div>\r\n      <div>\r\n        <button id=\"submit\" type=\"button\" onClick={() => sendLoginRequest()}>\r\n          Login\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}